
# JSON-Format of the MQTT-Messages
# {
#   "timestamp": tmp_time.strftime("%Y-%m-%dT%H:%M:%S.%f"),
#   "metric_name": chunk["metric_name"],
#   "trivial_name": chunk["trivial_name"],
#   "unit": chunk["unit"],
#   "value": value.Value.Value,
# }


[[inputs.mqtt_consumer]]
# hostaddress of the mqtt broker
servers = ["tcp://mosquitto:1883"]
# topics to listen to 
topics = [
  
  "ultrasonic-opcua",
  
  "mcp150-opcua"
  
]
# Content format of the MQTT-Messages
data_format = "json_v2"

  # read in json-format 
  [[inputs.mqtt_consumer.json_v2]]
    # read in json as object
    [[inputs.mqtt_consumer.json_v2.object]]
      # set the path to the root of the JSON-Object
      path = "@this"
      # stops telegraf from chaining the key path
      disable_prepend_keys = true

      # defining the timestamp key 
      timestamp_key = "timestamp"
      # defining the timestamp format by go reference time 
      timestamp_format = "2006-01-02T15:04:05.000000"
      # setting keys as tags
      tags = ["metric_name","trivial_name", "unit"]
      # setting field to value key and define its type
      [inputs.mqtt_consumer.json_v2.object.fields]
        value = "float"

# set the measurement name to the metric_name
[[processors.converter]]
  [processors.converter.tags]
    measurement = ["metric_name"]

# rename "topic" to "bucket"
[[processors.rename]]
  [[processors.rename.replace]]
    tag = "topic"
    dest = "source"

# print out the data to a file for easier debugging
[[outputs.file]]
  files = ["/tmp/metrics.out"]
  tagexclude = ["host"]

# write data to the influxDB
[[outputs.influxdb_v2]]
  # The URLs of the InfluxDB cluster nodes.
  urls = ["http://influxdb:8086"]

  # API token for authentication.
  token = "ABC123"

  # Organization is the name of the organization you wish to write to; must exist.
  organization = "private"

  # Destination bucket to write into defined by a tag
  bucket_tag = "source"