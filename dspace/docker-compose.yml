networks:
  dspacenet:
    ipam:
      config:
        # Define a custom subnet for our DSpace network, so that we can easily trust requests from host to container.
        # If you customize this value, be sure to customize the 'proxies.trusted.ipranges' env variable below.
        - subnet: 172.23.0.0/16
services:
  # DSpace (backend) webapp container
  dspace:
    container_name: dspace
    environment:
      # Below syntax may look odd, but it is how to override dspace.cfg settings via env variables.
      # See https://github.com/DSpace/DSpace/blob/main/dspace/config/config-definition.xml
      # __P__ => "." (e.g. dspace__P__dir => dspace.dir)
      # __D__ => "-" (e.g. google__D__metadata => google-metadata)
      # dspace.dir: Must match with Dockerfile's DSPACE_INSTALL directory.
      dspace__P__dir: /dspace
      # Uncomment to set a non-default value for dspace.server.url or dspace.ui.url
      dspace__P__server__P__url: https://dspace.mokipro.fc.eah-jena.de/server
      dspace__P__ui__P__url: https://dspace.mokipro.fc.eah-jena.de
      dspace__P__name: 'DSpace Started with Docker Compose'
      # db.url: Ensure we are using the 'dspacedb' image for our database
      db__P__url: 'jdbc:postgresql://dspacedb:5432/dspace'
      #cora
      #rest__P__cors__P__allowed__D__origins: dspace.mokipro.fc.eah-jena.de
      # solr.server: Ensure we are using the 'dspacesolr' image for Solr
      solr__P__server: http://dspacesolr:8983/solr
      # proxies.trusted.ipranges: This setting is required for a REST API running in Docker to trust requests
      # from the host machine. This IP range MUST correspond to the 'dspacenet' subnet defined above.
      proxies__P__trusted__P__ipranges: '172.23.0'
      LOGGING_CONFIG: /dspace/config/log4j2-container.xml
    #image: "${DOCKER_OWNER:-dspace}/dspace:${DSPACE_VER:-latest-test}"
    build:
      context: ./back-end/test
      dockerfile: Dockerfile
    depends_on:
      - dspacedb
    networks:
      - dspacenet
    ports:
      - published: 8080
        target: 8080
      - published: 8000
        target: 8000
    stdin_open: true
    tty: true
    volumes:
      #  # Keep DSpace assetstore directory between reboots
      - assetstore:/dspace/assetstore
      #  # Mount local [src]/dspace/config/ to container. This syncs your local configs with container
      #   # NOTE: Environment variables specified above will OVERRIDE any configs in local.cfg or dspace.cfg
      - ./back-end/test/dspace/config:/dspace/config
    #   # Ensure that the database is ready BEFORE starting tomcat
    #   # 1. While a TCP connection to dspacedb port 5432 is not available, continue to sleep
    #   # 2. Then, run database migration to init database tables
    #   # 3. Finally, start DSpace
    entrypoint:
      - /bin/bash
      - '-c'
      - |
        while (!</dev/tcp/dspacedb/5432) > /dev/null 2>&1; do sleep 1; done;
        /dspace/bin/dspace database migrate
        java -jar /dspace/webapps/server-boot.jar --dspace.dir=/dspace
    extra_hosts:
      - "host.docker.internal:host-gateway"
  # DSpace PostgreSQL database container
  dspacedb:
    container_name: dspacedb
    # Uses a custom Postgres image with pgcrypto installed
    image: postgres:16
    #command: -c config-file=/etc/postgresql/postgresql.conf
    env_file:
      - ./back-end/postgres/.env
    volumes:
      - ./back-end/postgres/postgres.conf:/etc/postgresql/postgresql.conf
      - ./back-end/postgres/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ./back-end/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./back-end/postgres/data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      dspacenet: # DSpace Solr container
  dspacesolr:
    container_name: dspacesolr
    image: solr:8.11.3
    ports:
      - "8983:8983"
    volumes:
      - ./back-end/test/dspace/solr:/var/solr/data
    networks:
      dspacenet:
    entrypoint:
      - /bin/bash
      - '-c'
      - |
        init-var-solr
        precreate-core authority /opt/solr/server/solr/configsets/authority
        cp -r /opt/solr/server/solr/configsets/authority/* authority
        precreate-core oai /opt/solr/server/solr/configsets/oai
        cp -r /opt/solr/server/solr/configsets/oai/* oai
        precreate-core search /opt/solr/server/solr/configsets/search
        cp -r /opt/solr/server/solr/configsets/search/* search
        precreate-core statistics /opt/solr/server/solr/configsets/statistics
        cp -r /opt/solr/server/solr/configsets/statistics/* statistics
        precreate-core qaevent /opt/solr/server/solr/configsets/qaevent
        cp -r /opt/solr/server/solr/configsets/qaevent/* qaevent
        precreate-core suggestion /opt/solr/server/solr/configsets/suggestion
        cp -r /opt/solr/server/solr/configsets/suggestion/* suggestion
        exec solr -f
  dspace-angular:
    container_name: dspace-angular
    environment:
      DSPACE_UI_SSL: 'false'
      DSPACE_UI_HOST: dsapce-angular
      DSPACE_UI_PORT: '4000'
      DSPACE_UI_NAMESPACE: /
      DSPACE_REST_SSL: 'true'
      DSPACE_REST_HOST: dspace.mokipro.fc.eah-jena.de
      DSPACE_REST_PORT: 443
      DSPACE_REST_NAMESPACE: /server
    build:
      context: ./front-end
      dockerfile: Dockerfile
    networks:
      dspacenet:
    ports:
      - published: 4000
        target: 4000
      - published: 9876
        target: 9876
    stdin_open: true
    tty: true
    extra_hosts:
      - "host.docker.internal:host-gateway"
  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./nginx/config/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - dspace
      - dspace-angular
    networks:
      - dspacenet
    extra_hosts:
      - "host.docker.internal:host-gateway"


volumes:
  assetstore:
  pgdata:
  solr_data:
