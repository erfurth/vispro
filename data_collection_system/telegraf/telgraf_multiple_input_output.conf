[[inputs.mqtt_consumer]]
  # Host address of the MQTT broker
  servers = ["tcp://mosquitto:1883"]
  
  # Topics to listen to
  topics = [
    "sensordaten",       # Topic for sensor data
    "maschinendaten",    # Topic for machine data
  ]
  
  # Content format of the MQTT messages
  data_format = "json_v2"

  # Configuration for handling JSON data from the "sensordaten" topic
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.object]]
    # Only process messages where the topic is "sensordaten"
    tagpass = { topic = [ "sensordaten" ] }
    
      # Read the JSON object from the root
      path = "@this"
      
      # Prevent Telegraf from adding the key path as a prefix to keys
      disable_prepend_keys = true

      # Define the key in the JSON object that represents the timestamp
      timestamp_key = "timestamp"
      
      # Set the format of the timestamp using Go's reference time format
      timestamp_format = "2006-01-02T15:04:05.000000"
      
      # Set the timezone for timestamps
      timestamp_timezone = "Europe/Berlin"
      
      # Specify which keys in the JSON should be treated as tags
      tags = ["metric_name", "trivial_name", "unit"]
      
      # Map the "value" field to a float type
      [inputs.mqtt_consumer.json_v2.object.fields]
        value = "float"

  # Configuration for handling JSON data from the "maschinendaten" topic
  [[inputs.mqtt_consumer.json_v2]]
    [[inputs.mqtt_consumer.json_v2.object]]
    # Only process messages where the topic is "maschinendaten"
    tagpass = { topic = [ "maschinendaten" ] }
    
      # Read the JSON object from the root
      path = "@this"
      
      # Prevent Telegraf from adding the key path as a prefix to keys
      disable_prepend_keys = true

      # Define the key in the JSON object that represents the timestamp
      timestamp_key = "timestamp"
      
      # Set the format of the timestamp using Go's reference time format
      timestamp_format = "2006-01-02T15:04:05.000000"
      
      # Set the timezone for timestamps
      timestamp_timezone = "Europe/Berlin"
      
      # Specify which keys in the JSON should be treated as tags, including an additional "test" tag
      tags = ["metric_name", "trivial_name", "unit", "test"]
      
      # Map the "value" field to a float type
      [inputs.mqtt_consumer.json_v2.object.fields]
        value = "float"

# Convert the "metric_name" tag into the measurement name
[[processors.converter]]
  [processors.converter.tags]
    measurement = ["metric_name"]

# Rename the "topic" tag to "source" for clarity
[[processors.rename]]
  [[processors.rename.replace]]
    tag = "topic"
    dest = "source"

# Output the processed data to a file for debugging purposes
[[outputs.file]]
  files = ["/tmp/metrics.out"]  # Path to the output file
  
  # Exclude the "host" tag from the output file
  tagexclude = ["host"]

# Write data from "sensordaten" to InfluxDB
[[outputs.influxdb_v2]]
  urls = [""]  # URL of the InfluxDB instance
  token = ""
  organization = "test"  # InfluxDB organization name
  bucket = "sensordaten"  # InfluxDB bucket for sensor data
  tagpass = { source = [ "sensordaten" ] }  # Filter to only write data from "sensordaten"

# Write data from "maschinendaten" to InfluxDB
[[outputs.influxdb_v2]]
  urls = [""]  # URL of the InfluxDB instance
  token = ""
  organization = "test"  # InfluxDB organization name
  bucket = "maschinendaten"  # InfluxDB bucket for machine data
  tagpass = { source = [ "maschinendaten" ] }  # Filter to only write data from "maschinendaten"
